# This workflow file merges both build and release steps into a single file.
# It will build your artifacts when pushing or creating a tag (that starts with 'v'),
# and then automatically create a release and upload assets if a 'v*' tag is pushed.

name: Build and Release

on:
  push:
    branches:
      - main
      - master
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

jobs:
  build-all-artifacts:
    uses: ./.github/workflows/build-workflow.yml

  create-release:
    runs-on: ubuntu-latest
    needs: build-all-artifacts
    if: ${{ success() && startsWith(github.ref, 'refs/tags/v') }}
    steps:
      # Check out the current repository
      - name: Check out repository
        uses: actions/checkout@v4

      # Download JAR Artifact from the build job
      - name: Download JAR Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build

      # Download AppImage Artifact from the build job
      - name: Download AppImage Artifact
        uses: actions/download-artifact@v4
        with:
          name: WhisperCat.AppImage
          path: release

      # Download .deb package from the build job
      - name: Download .deb Package Artifact
        uses: actions/download-artifact@v4
        with:
          name: whispercat.deb
          path: release

      # Download Windows installer from the build job
      - name: Download Windows Installer Artifact
        uses: actions/download-artifact@v4
        with:
          name: WhisperCat-Installer
          path: release

      # Create a release on GitHub
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "${{ github.ref }}"
          release_name: "Release ${{ github.ref }}"
          body: "Automatically created release (Build run #${{ github.run_number }})"
          draft: false
          prerelease: false

      # Upload the JAR file to the release
      - name: Upload JAR to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: "${{ steps.create_release.outputs.upload_url }}"
          asset_path: build/Audiorecorder-1.0-SNAPSHOT-jar-with-dependencies.jar
          asset_name: WhisperCat.jar
          asset_content_type: application/java-archive

      # Upload the AppImage to the release
      - name: Upload AppImage to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: "${{ steps.create_release.outputs.upload_url }}"
          asset_path: release/WhisperCat.AppImage
          asset_name: WhisperCat.AppImage
          asset_content_type: application/octet-stream

      # Upload the .deb package to the release
      - name: Upload .deb Package to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: "${{ steps.create_release.outputs.upload_url }}"
          asset_path: release/whispercat.deb
          asset_name: whispercat.deb
          asset_content_type: application/vnd.debian.binary-package

      # Upload the Windows installer to the release
      - name: Upload Windows Installer to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: "${{ steps.create_release.outputs.upload_url }}"
          asset_path: release/WhisperCat-1.0.0.exe
          asset_name: WhisperCat-Windows-Installer.exe
          asset_content_type: application/octet-stream